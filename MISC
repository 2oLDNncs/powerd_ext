Function %Collection%(obj, coll)
   '  Compute a list of objects from the object <obj>
   ' and fill the collection <coll> with it

   Dim MyModel
   Set MyModel=ActiveModel

   Dim t
   For each t in MyModel.ExtendedObjects
      If "Param" = t.Stereotype Then
         Dim tbl
         Set tbl = t.GetExtendedAttribute("Table")
         
         If not tbl is nothing Then
            If obj.Name = tbl.Name Then
               coll.Add(t)
            End If
         End If
      End If
   Next

   %Collection% = True
   
End Function

/**
 * @author 2oLDNncs 20240608
 */
public final class TransitiveClosure<V> implements Serializable {
	
	private final Map<V, Collection<V>> headTails = newMap();
	
	private final Map<V, Collection<V>> tailHeads = newMap();
	
	public final void connect(final V head, final V tail) {
		this.addArc(head, tail);
		this.applyTransitivity(head, tail);
	}
	
	public final Collection<V> getTails(final V head) {
		return this.headTails.get(head);
	}
	
	public final Collection<V> getHeads(final V tail) {
		return this.tailHeads.get(tail);
	}
	
	public final boolean isConnected(final V head, final V tail) {
		return this.headTails.getOrDefault(head, Collections.emptySet()).contains(tail);
	}
	
	public final Collection<V> getRoots() {
		return minus(this.headTails.keySet(), this.tailHeads.keySet());
	}
	
	public final Collection<V> getLeaves() {
		return minus(this.tailHeads.keySet(), this.headTails.keySet());
	}
	
	public final void forEachArc(final BiConsumer<V, V> action) {
		newMap(this.headTails).forEach((head, tails) -> {
			newList(tails).forEach(tail -> {
				action.accept(head, tail);
			});
		});
	}
	
	public final void forEachMaxArc(final BiConsumer<V, V> action) {
		final var leaves = this.getLeaves();
		
		this.getRoots().forEach(root -> {
			this.getTails(root).stream()
			.filter(leaves::contains)
			.forEach(leaf -> {
				action.accept(root, leaf);
			});
		});
	}
	
	private final void addArc(final V head, final V tail) {
		add(this.headTails, head, tail);
		add(this.tailHeads, tail, head);
	}
	
	private final void applyTransitivity(final V head, final V tail) {
		this.forEachArc((h, t) -> {
			if (tail.equals(h)) {
				this.addArc(head, t);
			}
			
			if (t.equals(head)) {
				this.addArc(h, tail);
			}
		});
	}
	
	private static final long serialVersionUID = 7797977345376468869L;
	
	private static final <K, V> void add(final Map<K, Collection<V>> arcs, final K head, final V tail) {
		arcs.computeIfAbsent(head, __ -> newSet()).add(tail);
	}
	
	private static final <E> Collection<E> minus(final Collection<E> a, final Collection<E> b) {
		final var result = newSet(a);
		
		result.removeAll(b);
		
		return result;
	}
	
	private static final <E> Collection<E> newList(final Collection<E> source) {
		return new ArrayList<>(source);
	}
	
	private static final <K, V> Map<K, V> newMap() {
		return new HashMap<>();
	}
	
	private static final <K, V> Map<K, V> newMap(final Map<K, V> source) {
		return new HashMap<>(source);
	}
	
	private static final <E> Collection<E> newSet() {
		return new HashSet<>();
	}
	
	private static final <E> Collection<E> newSet(final Collection<E> source) {
		return new HashSet<>(source);
	}
	
}
