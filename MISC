Function %Collection%(obj, coll)
   '  Compute a list of objects from the object <obj>
   ' and fill the collection <coll> with it

   Dim MyModel
   Set MyModel=ActiveModel

   Dim t
   For each t in MyModel.ExtendedObjects
      If "Param" = t.Stereotype Then
         Dim tbl
         Set tbl = t.GetExtendedAttribute("Table")
         
         If not tbl is nothing Then
            If obj.Name = tbl.Name Then
               coll.Add(t)
            End If
         End If
      End If
   Next

   %Collection% = True
   
End Function

/**
 * @author 2oLDNncs 20240608
 *
 * @param <V>
 */
public final class OrientedGraph<V> implements Serializable {
	
	private final Map<V, Collection<V>> headTails = newMap();
	
	private final Map<V, Collection<V>> tailHeads = newMap();
	
	private final boolean transitive;
	
	public OrientedGraph(final boolean transitive) {
		this.transitive = transitive;
	}
	
	public final boolean isTransitive() {
		return this.transitive;
	}
	
	public final void connect(final V head, final V tail) {
		this.addArc(head, tail);
		
		if (this.isTransitive()) {
			this.applyTransitivity(head, tail);
		}
	}
	
	public final Collection<V> getTails(final V head) {
		return this.headTails.getOrDefault(head, Collections.emptySet());
	}
	
	public final Collection<V> getHeads(final V tail) {
		return this.tailHeads.getOrDefault(tail, Collections.emptySet());
	}
	
	public final boolean isArc(final V head, final V tail) {
		return this.getTails(head).contains(tail);
	}
	
	public final Collection<V> getAllHeads() {
		return this.headTails.keySet();
	}
	
	public final Collection<V> getAllTails() {
		return this.tailHeads.keySet();
	}
	
	public final Collection<V> getVertices() {
		return plus(this.getAllHeads(), this.getAllTails());
	}
	
	public final Collection<V> getRoots() {
		return minus(this.getAllHeads(), this.getAllTails());
	}
	
	public final Collection<V> getLeaves() {
		return minus(this.getAllTails(), this.getAllHeads());
	}
	
	public final void forEachArc(final BiConsumer<V, V> action) {
		newMap(this.headTails).forEach((head, tails) -> {
			newList(tails).forEach(tail -> {
				action.accept(head, tail);
			});
		});
	}
	
	public final void forEachMaxArc(final BiConsumer<V, V> action) {
		final var leaves = this.getLeaves();
		
		this.getRoots().forEach(root -> {
			this.getTails(root).stream()
			.filter(leaves::contains)
			.forEach(leaf -> {
				action.accept(root, leaf);
			});
		});
	}
	
	public final void forEachMaxPath(final Consumer<List<V>> action) {
		this.getRoots().forEach(root -> {
			this.forEachPathFrom(root, action);
		});
	}
	
	public final void forEachPathFrom(final V head, final Consumer<List<V>> action) {
		this.new OutgoingPathFinder().forEachPath(head, action);
	}
	
	public final void forEachPathTo(final V tail, final Consumer<List<V>> action) {
		this.new IncomingPathFinder().forEachPath(tail, action);
	}
	
	private final void addArc(final V head, final V tail) {
		add(this.headTails, head, tail);
		add(this.tailHeads, tail, head);
	}
	
	private final void applyTransitivity(final V head, final V tail) {
		final var predecessors = newList(this.getHeads(head));
		final var successors = newList(this.getTails(tail));
		
		predecessors.forEach(p -> {
			this.addArc(p, tail);
		});
		
		successors.forEach(s -> {
			this.addArc(head, s);
		});
		
		predecessors.forEach(p -> {
			successors.forEach(s -> {
				this.addArc(p, s);
			});
		});
	}
	
	/**
	 * @author 2oLDNncs 20240621
	 */
	private final class OutgoingPathFinder extends PathFinder<V> {
		
		public OutgoingPathFinder() {
			super(OrientedGraph.this.getLeaves());
		}
		
		@Override
		protected final Object[] getCycleExceptionMessageArgs(final Object path, final Object vertex) {
			return new Object[] { path, vertex };
		}
		
		@Override
		protected final Collection<V> getNextVertices(V origin) {
			return OrientedGraph.this.getTails(origin);
		}
		
		@Override
		protected final int getInsertionIndex(final int pathSize) {
			return pathSize;
		}
		
		@Override
		protected final int getRemovalIndex(final int pathSize) {
			return pathSize - 1;
		}
		
		private static final long serialVersionUID = -2004507300852730885L;
		
	}
	
	/**
	 * @author 2oLDNncs 20240621
	 */
	private final class IncomingPathFinder extends PathFinder<V> {
		
		public IncomingPathFinder() {
			super(OrientedGraph.this.getRoots());
		}
		
		@Override
		protected final Object[] getCycleExceptionMessageArgs(final Object path, final Object vertex) {
			return new Object[] { vertex, path };
		}
		
		@Override
		protected final Collection<V> getNextVertices(V origin) {
			return OrientedGraph.this.getHeads(origin);
		}
		
		@Override
		protected final int getInsertionIndex(final int pathSize) {
			return 0;
		}
		
		@Override
		protected final int getRemovalIndex(final int pathSize) {
			return 0;
		}
		
		private static final long serialVersionUID = -1342815930328295026L;
		
	}
	
	private static final long serialVersionUID = 7797977345376468869L;
	
	private static final <K, V> boolean add(final Map<K, Collection<V>> arcs, final K head, final V tail) {
		return arcs.computeIfAbsent(head, __ -> newSet()).add(tail);
	}
	
	private static final <E> Collection<E> binop(final BiConsumer<Collection<E>, Collection<E>> op,
			final Collection<E> a, final Collection<E> b) {
		final var result = newSet(a);
		
		op.accept(result, b);
		
		return result;
	}
	
	private static final <E> Collection<E> plus(final Collection<E> a, final Collection<E> b) {
		return binop(Collection::addAll, a, b);
	}
	
	private static final <E> Collection<E> minus(final Collection<E> a, final Collection<E> b) {
		return binop(Collection::removeAll, a, b);
	}
	
	private static final <E> List<E> newList() {
		return new ArrayList<>();
	}
	
	private static final <E> List<E> newList(final Collection<E> source) {
		return new ArrayList<>(source);
	}
	
	private static final <K, V> Map<K, V> newMap() {
		return new HashMap<>();
	}
	
	private static final <K, V> Map<K, V> newMap(final Map<K, V> source) {
		return new HashMap<>(source);
	}
	
	private static final <E> Collection<E> newSet() {
		return new HashSet<>();
	}
	
	private static final <E> Collection<E> newSet(final Collection<E> source) {
		return new HashSet<>(source);
	}
	
	/**
	 * @author 2oLDNncs 20240621
	 *
	 * @param <V>
	 */
	private static abstract class PathFinder<V> implements Serializable {
		
		private final List<V> path = newList();
		
		private final Collection<V> ends;
		
		protected PathFinder(final Collection<V> ends) {
			this.ends = ends;
		}
		
		public final void forEachPath(final V anchor, final Consumer<List<V>> action) {
			this.begin(anchor);
			
			this.getNextVertices(anchor).forEach(v -> {
				this.forEachPath(v, action);
			});
			
			this.end(action);
		}
		
		protected abstract Object[] getCycleExceptionMessageArgs(Object path, Object vertex);
		
		protected abstract Collection<V> getNextVertices(V origin);
		
		protected abstract int getInsertionIndex(int pathSize);
		
		protected abstract int getRemovalIndex(int pathSize);
		
		private final void begin(final V vertex) {
			if (this.path.contains(vertex)) {
				throw new IllegalStateException(
						String.format("Cycle detected : %s -> %s",
								this.getCycleExceptionMessageArgs(this.path, vertex)));
			}
			
			this.path.add(this.getInsertionIndex(this.path.size()), vertex);
		}
		
		private final void end(final Consumer<List<V>> action) {
			final var i = this.getRemovalIndex(this.path.size());
			final var e = this.path.get(i);
			
			if (this.ends.contains(e)) {
				action.accept(this.path);
			}
			
			this.path.remove(i);
		}
		
		private static final long serialVersionUID = -2445477282075393002L;
		
	}
	
}

function main(workbook: ExcelScript.Workbook) {
	let selectedSheet = workbook.getActiveWorksheet();

	selectedSheet.getShapes().forEach(shape => {
		if ("{F9536926-BCBA-42FC-8F89-698BED5BE012}" != shape.getAltTextDescription()) {
			shape.delete();
		}
	});

	let heads = new Map<string, [string]>();
	let tails = new Map<string, [string]>();

	let usedRange = selectedSheet.getUsedRange();

	console.log("usedRange");

	for (let j = 1; j < usedRange.getRowCount(); j += 1) {
		let rowTexts = usedRange.getRow(j).getTexts()[0];
		let head = rowTexts[0];
		let tail = rowTexts[1];

		console.log(head + " -> " + tail);

		if (heads.has(tail)) {
			heads.get(tail).push(head);
		} else {
			heads.set(tail, [head]);
		}
		
		if (tails.has(head)) {
			tails.get(head).push(tail);
		} else {
			tails.set(head, [tail]);
		}
	}

	console.log("heads");
	console.log(heads);

	console.log("tails");
	console.log(tails);

	let nodes = new Set<string>();

	heads.forEach((hs, t) => {
		nodes.add(t);
	});

	tails.forEach((ts, h) => {
		nodes.add(h);
	});

	console.log("nodes");
	console.log(nodes);

	const depth = (node: string) => {
		let result = 0;
		let hs = new Set(heads.get(node) ?? []);

		while (0 < hs.size) {
			result += 1;

			let tmp = new Set<string>();
			hs.forEach(h => {
				(heads.get(h) ?? []).forEach(e => {
					tmp.add(e);
				});
			});
			hs = tmp;
		}

		return result;
	};

	let offsets: number[] = [];
	let nodeShapes = new Map < string, ExcelScript.Shape >();
	let nodes_ = Array.from(nodes.values());

// This needs to be a for loop because Excel seems to execute a forEach in non-sequential way
	for (let i = 0; i < nodes.size; i += 1) {
		const node = nodes_[i];
		const d = depth(node);

		while (offsets.length <= d) {
			offsets.push(-1);
		}

		offsets[d] += 1;

		let nodeShape = selectedSheet.addGeometricShape(ExcelScript.GeometricShapeType.rectangle);
		nodeShape.setPlacement(ExcelScript.Placement.absolute);
		nodeShape.setLeft(200 + d * 150);
		nodeShape.setTop(100 + offsets[d] * 30);
		nodeShape.getTextFrame().getTextRange().setText(node);
		nodeShape.getTextFrame().setAutoSizeSetting(ExcelScript.ShapeAutoSize.autoSizeShapeToFitText);
		nodeShapes.set(node, nodeShape);
	}

	for (let j = 1; j < usedRange.getRowCount(); j += 1) {
		const rowTexts = usedRange.getRow(j).getTexts()[0];
		const head = rowTexts[0];
		const tail = rowTexts[1];
		let headShape = nodeShapes.get(head);
		let tailShape = nodeShapes.get(tail);
		let line_13 = selectedSheet.addLine(0, 0, 100, 100).getLine();
		line_13.connectBeginShape(headShape, 3);
		line_13.connectEndShape(tailShape, 1);
	}
}
